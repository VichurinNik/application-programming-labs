Index: lab1/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\r\nimport argparse\r\n\r\n\r\ndef parsing() -> str:\r\n   \"\"\"\r\n      Parse command line arguments and returns the file name\r\n      :return: file name\r\n   \"\"\"\r\n   parser = argparse.ArgumentParser()\r\n   parser.add_argument('file', type=str, help='The name of the file to analyze')\r\n   args = parser.parse_args()\r\n   return args.file\r\n\r\n\r\ndef open_file(namefile: str) -> str :\r\n    \"\"\"\r\n       Reading the contents of a file\r\n       :param namefile: The file name\r\n       :return: A string containing data from a file\r\n       \"\"\"\r\n    with open(namefile, 'r', encoding='utf=8') as file:\r\n       text = file.read()\r\n       return text\r\n\r\n\r\ndef separation_text(text: str) -> list[str]:\r\n   \"\"\"\r\n          Searches for parser values in the text\r\n          :param text: A line with the words\r\n          :return: A row with birth dates\r\n          \"\"\"\r\n   pattern = r'\\d{2}.\\d{2}.\\d{4}'\r\n   people = re.findall(pattern, text)\r\n   return people\r\n\r\n\r\ndef separation_birth(year: int,month: int,day: int) -> int:\r\n   \"\"\"\r\n             Check the condition of occurrence of birthdays\r\n             :param text: Year,month,day\r\n             :return:  1 if it fits\r\n             \"\"\"\r\n   count=0\r\n   if ((1983 == year) and (month >= 9) and (day > 25)):\r\n      count += 1\r\n   if (1984 <= year and 1993 >= year):\r\n      count += 1\r\n   if ((1994 == year) and (month <= 9) and (day <= 25)):\r\n      count += 1\r\n   return count\r\n\r\n\r\ndef counting_birth(people: str) -> list[str]:\r\n   \"\"\"\r\n              Divides the date of the birthday into components and goes through all\r\n               :param text: A line with the words\r\n               :return: the number of suitable dates\r\n               \"\"\"\r\n   count=0\r\n   for i in range(len(people) - 1):\r\n      year = int(people[i].split('.')[2])\r\n      month = int(people[i].split('.')[1])\r\n      day = int(people[i].split('.')[0])\r\n      count+=separation_birth(year,month,day)\r\n   return count\r\n\r\n\r\ndef main():\r\n   filename = parsing()\r\n   text =  open_file( filename)\r\n   separation = separation_text(text)\r\n   Quantity = counting_birth(separation)\r\n   print('Количество людей возрастом от 30 до 40 лет:', Quantity)\r\n\r\nif __name__ == \"__main__\":\r\n   main()\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lab1/main.py b/lab1/main.py
--- a/lab1/main.py	(revision 27d9714966dde9258ed4429532c4ccb1c399a100)
+++ b/lab1/main.py	(date 1728829561226)
@@ -1,5 +1,7 @@
-import re
 import argparse
+import datetime
+import re
+import os
 
 
 def parsing() -> str:
@@ -35,43 +37,33 @@
    return people
 
 
-def separation_birth(year: int,month: int,day: int) -> int:
-   """
-             Check the condition of occurrence of birthdays
-             :param text: Year,month,day
-             :return:  1 if it fits
-             """
-   count=0
-   if ((1983 == year) and (month >= 9) and (day > 25)):
-      count += 1
-   if (1984 <= year and 1993 >= year):
-      count += 1
-   if ((1994 == year) and (month <= 9) and (day <= 25)):
-      count += 1
-   return count
-
-
-def counting_birth(people: str) -> list[str]:
+def counting_birth(separation: str) -> str:
    """
               Divides the date of the birthday into components and goes through all
-               :param text: A line with the words
-               :return: the number of suitable dates
+               :param separation: A line with the words
+               :return: result
                """
-   count=0
-   for i in range(len(people) - 1):
-      year = int(people[i].split('.')[2])
-      month = int(people[i].split('.')[1])
-      day = int(people[i].split('.')[0])
-      count+=separation_birth(year,month,day)
-   return count
+
+   current_date_time = datetime.datetime.now()
+   b=0
+   for birthday in separation:
+      birth_date=datetime.datetime.strptime(birthday,'%d.%m.%Y')
+      age = (current_date_time - birth_date).days / 365
+      if  30<= age <=40:
+         b+=1
+   return b
+
+
 
+
+#age = (current_date_time - birth_date).days
 
 def main():
    filename = parsing()
    text =  open_file( filename)
    separation = separation_text(text)
-   Quantity = counting_birth(separation)
-   print('Количество людей возрастом от 30 до 40 лет:', Quantity)
+   result=counting_birth(separation)
+   print('Количество людей возрастом от 30 до 40 лет:', result)
 
 if __name__ == "__main__":
    main()
